{"version":3,"sources":["store/reducers/dogs-reducer.ts","components/ui/spinner.tsx","routes/routes.tsx","store/store.ts","components/layout/main-header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","dogs","dogSelected","dog","specie","species","images","dogsReducer","state","action","type","payload","fetchDogs","users","selectDog","unselectDog","actionsDogs","Spinner","props","Dogs","lazy","NotFound","Routes","fallback","size","exact","path","component","reducer","combineReducers","appStore","createStore","MainHeader","className","role","data-qa","App","store","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"svBAoCA,IAAMA,EAA+B,CACnCC,KAAM,GACNC,YAdO,CACLC,IAAK,gBACLC,OAAQ,gBACRC,QAAS,GACTC,OAAQ,KAaCC,EAAc,WAAwC,IAAvCC,EAAsC,uDAA9BR,EAAcS,EAAgB,uCAEhE,OAAQA,EAAOC,MAEb,IAvCe,sBAwCb,OAAO,EAAP,GAAYF,EAAZ,CAAmBP,KAAMQ,EAAOE,UAElC,IAzCe,kBA0Cb,OAAO,EAAP,GAAYH,EAAZ,CAAmBN,YAAaO,EAAOE,UAEzC,IA3CiB,oBA4Cf,OAAO,EAAP,GAAYH,EAAZ,CAAmBN,YA5BhB,CACLC,IAAK,gBACLC,OAAQ,gBACRC,QAAS,GACTC,OAAQ,MA2BR,QACE,OAAOE,IAQPI,EAAY,SAACC,GACjB,MAAO,CACLH,KA5De,sBA6DfC,QAASE,IAIPC,EAAY,SAACX,GACjB,MAAO,CACLO,KAlEe,kBAmEfC,QAASR,IAIPY,EAAc,WAClB,MAAO,CACLL,KAxEiB,sBA6ERM,EAAc,WACzB,MAAO,CACLJ,YACAE,YACAC,iB,iLCnFSE,EAAqC,SAACC,GACjD,OACE,4CCHEC,EAAOC,gBAAK,kBAAM,sDAClBC,EAAWD,gBAAK,kBAAM,gCAEfE,EAAS,kBACpB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,CAASC,KAAK,QAChC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,IAAIC,UAAWN,O,wBCR3BO,EAAUC,YAAgB,CAC5BtB,YAAaA,MAIFuB,EAFEC,YAAYH,GCLhBI,G,MAAuB,WAClC,OACE,4BAAQC,UAAU,cAAcC,KAAK,SAASC,UAAQ,cACpD,wBAAIF,UAAU,sBAAd,SACA,2BAAOA,UAAU,sBAAjB,2BCkBSG,EAbO,WACpB,OACE,yBAAKH,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUI,MAAOP,GACf,kBAAC,EAAD,UCLJQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIoB,IACnBC,GACD5B,OAAOC,SAAS4B,MAEJC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAeC,GAE9C0B,MAAM3B,GACHK,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC/C/BE,K","file":"static/js/main.827cfdf4.chunk.js","sourcesContent":["import { IntDog, IntDogSelected } from '../../schemas/dogs';\r\n\r\n/* ========================================================\r\n  TYPES\r\n======================================================== */\r\n\r\nconst DOGS_FETCH = 'dogs/raceList/fetch';\r\nconst DOG_SELECT = 'dogs/dog/select';\r\nconst DOG_UNSELECT = 'dogs/dog/unselect';\r\n\r\n/* ========================================================\r\n  INTERFACES\r\n======================================================== */\r\n\r\ninterface IntDogsReducer {\r\n  dogs: Array<IntDog>;\r\n  dogSelected: IntDogSelected;\r\n}\r\n\r\n/* ========================================================\r\n  AUX\r\n======================================================== */\r\n\r\nfunction initDogSelected() {\r\n  return {\r\n    dog: 'noDogSelected',\r\n    specie: 'noDogSelected',\r\n    species: [],\r\n    images: []\r\n  }\r\n}\r\n\r\n/* ========================================================\r\n  REDUCER\r\n======================================================== */\r\n\r\nconst initialState: IntDogsReducer = {\r\n  dogs: [],\r\n  dogSelected: initDogSelected()\r\n};\r\n\r\nexport const dogsReducer = (state = initialState, action: any) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case DOGS_FETCH:\r\n      return { ...state, dogs: action.payload };\r\n\r\n    case DOG_SELECT:\r\n      return { ...state, dogSelected: action.payload };\r\n\r\n    case DOG_UNSELECT:\r\n      return { ...state, dogSelected: initDogSelected()\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/* ========================================================\r\n  ACTIONS\r\n======================================================== */\r\n\r\nconst fetchDogs = (users: Array<IntDog>) => {\r\n  return {\r\n    type: DOGS_FETCH,\r\n    payload: users\r\n  }\r\n};\r\n\r\nconst selectDog = (dog: IntDogSelected) => {\r\n  return {\r\n    type: DOG_SELECT,\r\n    payload: dog\r\n  }\r\n};\r\n\r\nconst unselectDog = () => {\r\n  return {\r\n    type: DOG_UNSELECT\r\n  }\r\n};\r\n\r\n\r\nexport const actionsDogs = ()=> {\r\n  return {\r\n    fetchDogs,\r\n    selectDog,\r\n    unselectDog\r\n  }\r\n};","import React from 'react';\r\n\r\ninterface IntSpinnerProps {\r\n  size: string;\r\n}\r\n\r\nexport const Spinner: React.FC<IntSpinnerProps> = (props)  => {\r\n  return (\r\n    <div>\r\n      Loading...\r\n    </div>\r\n  );\r\n};","import { Route, Switch } from 'react-router-dom';\r\nimport React, { Suspense, lazy } from 'react';\r\n\r\nimport { Spinner } from '../components/ui/spinner';\r\n\r\nconst Dogs = lazy(() => import('../views/dogs/view-dogs'));\r\nconst NotFound = lazy(() => import('../views/not-found/view-not-found'));\r\n\r\nexport const Routes = () => (\r\n  <Suspense fallback={<Spinner size='lg' />}>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Dogs}/>\r\n      <Route path=\"*\" component={NotFound}/>\r\n    </Switch>\r\n  </Suspense>\r\n);\r\n","import { createStore, combineReducers } from 'redux';\r\n\r\nimport { dogsReducer } from './reducers/dogs-reducer';\r\n\r\nconst reducer = combineReducers({\r\n    dogsReducer: dogsReducer,\r\n});\r\nconst appStore = createStore(reducer);\r\n\r\nexport default appStore;","import React from 'react';\r\n\r\nexport const MainHeader: React.FC = ()  => {\r\n  return (\r\n    <header className=\"main-header\" role=\"banner\" data-qa=\"mainHeader\">\r\n      <h1 className=\"main-header__title\">Dogs!</h1>\r\n      <small className=\"main-header__aside\">a canine application</small>\r\n    </header>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Routes } from './routes/routes';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport appStore from './store/store';\r\n\r\nimport './assets/scss/index.scss';\r\nimport { MainHeader } from './components/layout/main-header';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"dogTheme\">\r\n      <MainHeader/>\r\n      <Router>\r\n        <Provider store={appStore}>\r\n          <Routes></Routes>\r\n        </Provider>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}